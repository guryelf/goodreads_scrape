"""
Goodreads Veri Seti Analiz Scripti
Toplanan veri setini analiz etmek iÃ§in Ã¶rnek kod
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from pathlib import Path

def load_data():
    """CSV dosyasÄ±nÄ± yÃ¼kler"""
    data_path = Path('../data/goodreads_top_1000_books.csv')
    if data_path.exists():
        return pd.read_csv(data_path)
    else:
        print("Veri dosyasÄ± bulunamadÄ±. Ã–nce scraper'Ä± Ã§alÄ±ÅŸtÄ±rÄ±n.")
        return None

def basic_statistics(df):
    """Temel istatistikler"""
    print("=== TEMEL Ä°STATÄ°STÄ°KLER ===")
    print(f"Toplam kitap sayÄ±sÄ±: {len(df)}")
    print(f"Benzersiz yazar sayÄ±sÄ±: {df['author'].nunique()}")
    print(f"Ortalama puan: {df['average_rating'].mean():.2f}")
    print(f"Medyan puan: {df['average_rating'].median():.2f}")
    print(f"En yÃ¼ksek puan: {df['average_rating'].max():.2f}")
    print(f"En dÃ¼ÅŸÃ¼k puan: {df['average_rating'].min():.2f}")
    print()
    
def top_books(df, n=10):
    """En popÃ¼ler kitaplarÄ± gÃ¶sterir"""
    print(f"=== EN POPÃœLER {n} KÄ°TAP (Puan SayÄ±sÄ±na GÃ¶re) ===")
    top_by_ratings = df.nlargest(n, 'ratings_count')[['title', 'author', 'average_rating', 'ratings_count']]
    print(top_by_ratings.to_string(index=False))
    print()
    
def top_authors(df, n=10):
    """En popÃ¼ler yazarlarÄ± gÃ¶sterir"""
    print(f"=== EN POPÃœLER {n} YAZAR (Toplam Puan SayÄ±sÄ±na GÃ¶re) ===")
    author_stats = df.groupby('author').agg({
        'ratings_count': 'sum',
        'title': 'count',
        'average_rating': 'mean'
    }).round(2)
    author_stats.columns = ['Toplam_Puan_Sayisi', 'Kitap_Sayisi', 'Ortalama_Puan']
    top_authors_list = author_stats.nlargest(n, 'Toplam_Puan_Sayisi')
    print(top_authors_list.to_string())
    print()

def rating_distribution_analysis(df):
    """Puan daÄŸÄ±lÄ±mÄ± analizi"""
    print("=== PUAN DAÄžILIMI ANALÄ°ZÄ° ===")
    rating_ranges = pd.cut(df['average_rating'], 
                          bins=[0, 3.5, 4.0, 4.2, 4.4, 5.0],
                          labels=['ZayÄ±f (â‰¤3.5)', 'Orta (3.5-4.0)', 'Ä°yi (4.0-4.2)', 'Ã‡ok Ä°yi (4.2-4.4)', 'MÃ¼kemmel (>4.4)'])
    
    rating_dist = rating_ranges.value_counts().sort_index()
    print(rating_dist)
    print()
    
def engagement_analysis(df):
    """Engagement (etkileÅŸim) analizi"""
    print("=== ETKÄ°LEÅžÄ°M ANALÄ°ZÄ° ===")
    
    # En yÃ¼ksek puan/yorum oranÄ±na sahip kitaplar
    print("En Ã§ok 'tartÄ±ÅŸma' yaratan kitaplar (yÃ¼ksek puan/yorum oranÄ±):")
    high_engagement = df.nlargest(10, 'rating_to_review_ratio')[['title', 'author', 'rating_to_review_ratio', 'ratings_count', 'reviews_count']]
    print(high_engagement.to_string(index=False))
    print()

def create_visualizations(df):
    """Veri gÃ¶rselleÅŸtirme"""
    plt.style.use('seaborn-v0_8')
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    
    # 1. Puan daÄŸÄ±lÄ±mÄ± histogram
    axes[0,0].hist(df['average_rating'], bins=30, alpha=0.7, color='skyblue', edgecolor='black')
    axes[0,0].set_title('Ortalama Puan DaÄŸÄ±lÄ±mÄ±')
    axes[0,0].set_xlabel('Ortalama Puan')
    axes[0,0].set_ylabel('Kitap SayÄ±sÄ±')
    
    # 2. Puan sayÄ±sÄ± vs Ortalama puan scatter plot
    axes[0,1].scatter(df['ratings_count'], df['average_rating'], alpha=0.6, color='coral')
    axes[0,1].set_title('Puan SayÄ±sÄ± vs Ortalama Puan')
    axes[0,1].set_xlabel('Puan SayÄ±sÄ±')
    axes[0,1].set_ylabel('Ortalama Puan')
    axes[0,1].set_xscale('log')
    
    # 3. Top 15 yazarÄ±n kitap sayÄ±larÄ±
    top_authors_count = df['author'].value_counts().head(15)
    axes[1,0].barh(range(len(top_authors_count)), top_authors_count.values, color='lightgreen')
    axes[1,0].set_yticks(range(len(top_authors_count)))
    axes[1,0].set_yticklabels(top_authors_count.index, fontsize=8)
    axes[1,0].set_title('En Ã‡ok KitabÄ± Olan 15 Yazar')
    axes[1,0].set_xlabel('Kitap SayÄ±sÄ±')
    
    # 4. Puan/Yorum oranÄ± daÄŸÄ±lÄ±mÄ± (log scale)
    valid_ratios = df['rating_to_review_ratio'].dropna()
    valid_ratios = valid_ratios[valid_ratios > 0]  # Pozitif deÄŸerler
    axes[1,1].hist(np.log10(valid_ratios), bins=30, alpha=0.7, color='gold', edgecolor='black')
    axes[1,1].set_title('Puan/Yorum OranÄ± DaÄŸÄ±lÄ±mÄ± (Log Scale)')
    axes[1,1].set_xlabel('Log10(Puan/Yorum OranÄ±)')
    axes[1,1].set_ylabel('Kitap SayÄ±sÄ±')
    
    plt.tight_layout()
    plt.savefig('../data/goodreads_analysis.png', dpi=300, bbox_inches='tight')
    print("ðŸ“Š Grafikler 'data/goodreads_analysis.png' dosyasÄ±na kaydedildi")
    plt.show()

def export_summary_report(df):
    """Ã–zet raporu Excel formatÄ±nda export eder"""
    with pd.ExcelWriter('../data/goodreads_summary_report.xlsx', engine='openpyxl') as writer:
        # Genel istatistikler
        summary_stats = pd.DataFrame({
            'Metrik': ['Toplam Kitap', 'Benzersiz Yazar', 'Ortalama Puan', 'Medyan Puan'],
            'DeÄŸer': [len(df), df['author'].nunique(), 
                     round(df['average_rating'].mean(), 2),
                     round(df['average_rating'].median(), 2)]
        })
        summary_stats.to_excel(writer, sheet_name='Ã–zet_Ä°statistikler', index=False)
        
        # En popÃ¼ler kitaplar
        df.nlargest(50, 'ratings_count').to_excel(writer, sheet_name='En_PopÃ¼ler_Kitaplar', index=False)
        
        # Yazar istatistikleri
        author_stats = df.groupby('author').agg({
            'ratings_count': 'sum',
            'title': 'count',
            'average_rating': 'mean'
        }).round(2)
        author_stats.columns = ['Toplam_Puan_Sayisi', 'Kitap_Sayisi', 'Ortalama_Puan']
        author_stats.nlargest(30, 'Toplam_Puan_Sayisi').to_excel(writer, sheet_name='Yazar_Ä°statistikleri')
        
    print("ðŸ“‹ DetaylÄ± rapor 'data/goodreads_summary_report.xlsx' dosyasÄ±na kaydedildi")

def main():
    """Ana analiz fonksiyonu"""
    # Veriyi yÃ¼kle
    df = load_data()
    if df is None:
        return
    
    print("ðŸ“š GOODREADS VERÄ° SETÄ° ANALÄ°ZÄ°\n")
    
    # Analizleri Ã§alÄ±ÅŸtÄ±r
    basic_statistics(df)
    top_books(df)
    top_authors(df)
    rating_distribution_analysis(df)
    engagement_analysis(df)
    
    # GÃ¶rselleÅŸtirmeler
    create_visualizations(df)
    
    # Rapor export
    export_summary_report(df)
    
    print("\nâœ… Analiz tamamlandÄ±!")

if __name__ == "__main__":
    main()